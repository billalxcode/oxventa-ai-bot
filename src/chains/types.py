from web3 import Web3
from web3.types import TxParams
from web3.contract.contract import Contract

from typing import Union
from typing import Literal

from hexbytes import HexBytes
from eth_typing.encoding import HexStr
from eth_typing.evm import Address
from eth_typing.evm import ChecksumAddress

SUPPORTED_CHAINS = [
    "ethereum",
    "base",
    "bsc",
    "hardhat"
]

SUPPORTED_CHAINS_TYPE = Literal["ethereum", "base", "bsc", "hardhat"]

class ChainEvmAbstract:
    def __init__(self, endpoint_url: str, name: str, base_explorer_url: str):
        self.name: str
        self.w3: Web3
        self.base_explorer_url: str
    
    def get_chain_id(self): ...
    def get_gas_price(self): ...
    def generate_gas_price(self): ...
    def estimate_gas(self): ...
    def get_nonce(self, address: Union[Address, ChecksumAddress]): ...
    def get_balance(self, address: Union[Address, ChecksumAddress]): ...
    def send_transaction(self, tx_params: TxParams): ...
    def send_raw_transaction(self, raw_transaction: Union[HexStr, bytes]) -> HexBytes: ...
    def get_contract(self, address: Union[Address, ChecksumAddress], abi: dict) -> Contract: ...
    def add_poa_middleware(self): ...
    def add_gas_price_strategy(self): ...
    def format_explorer_tx_hash(self, tx_hash: str): ...
    def format_explorer_address(self, address: str): ...
    def format_explorer_token(self, token: str): ...

class ChainsManagerAbstract:
    def __init__(self):
        self.chains = {}

    def register_chains(self): ...
    def register_chain(self, name: str, cls: ChainEvmAbstract): ...
    def select_chain(
            self,
            name: SUPPORTED_CHAINS_TYPE): ...